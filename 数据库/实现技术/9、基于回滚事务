#### 时间戳并发控制

时间戳(TIMESTAMP)

* 一种基于时间的标志，将某一时刻转换成的一个数值。

* 时间戳具有唯一性和递增性。

事务的时间戳

* 事务T启动时，系统将该时刻赋予T，为T的时间戳
* 时间戳可以表征一系列事务执行的先后次序：时间戳小的事务先执行，时间戳大的事务后执行。
* 利用时间戳，可以不用锁，来进行并发控制



基于时间戳的并发控制

* 借助于时间戳，强制使一组并发事务的交叉执行，等价于一个特定顺序的串行执行。
* 特定顺序：时间戳由小到大。
* 如何强制：执行时判断冲突，
  * 如无冲突，予以执行；
  * 如有冲突，则撤销事务，并重启该事务，此时该事务获得了一个更大的时间戳，表明是后执行的事务。
* 有哪些冲突（两个事务对同一个元素有冲突的操作，必须要操作该元素的事务的时间戳，大于前一个操作该元素的事务的时间戳）：
  * 读-读无冲突；
  * 读-写或写-读冲突；
  * 写-写冲突。



一种简单的调度规则

* 对DB中的每个数据元素x，系统保留其上的最大时间戳
  * RT(x):即R-timestamp(x)读过该数据事务中最大的时间戳，即最后读x的事务的时间戳。
  * WT(x):即W-timestamp(x)写过该数据事务中最大的时间戳，即最后写x的事务的时间戳。
* 事务的时间戳
  * TS(T):即TimeStamp



一种简单的调度规则

* 读操作（一个检查：读-写，即读晚了）
  * 若T事务读x，则将T的时间戳TS与WT(x)比较: 
    * 若TS大(T后进行)，则允许T操作，并且更改RT(x)为max{RT(x),TS}；
    * 否则，有冲突，撤回T，重启T。
* 写操作（两个检查：写-读、写-写，即写晚了）
  * 若T事务写x，则将T的时间戳TS与RT(x)比较：
    * 若TS大(T后进行)，则允许T操作，并且更改WT(x)为max{WT(x),TS}；
    * 否则，有冲突，撤回T重做。
  * 若T事务写x，则将T的时间戳TS与WT(x)比较：
    * 若TS大，则允许T写，并且更改WT(x)为T的时间戳；
    * 否则有冲突，T撤回重做。



简单的调度规则的问题

* 脏读数据如何避免

* 放行一些事实上可实现的冲突

  * 托马斯写规则：过时的写操作可直接被忽略，而无需撤销过时的事务

  * 指的一个晚开的事务先写一个元素，但是只是写没有读，那么可以忽略这个先前这个事务的写（就是说 读-写、写-读的顺序必须保证）

  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201127140949235.png#pic_center)




另一种调度规则

* 对DB中的每个数据元素x，系统保留其上的最大时间戳
  * RT(x):即R-timestamp(x)：读过该数据事务中最大的时间戳，即最后读x的事务的时间戳。
  * WT(x):即W-timestamp(x)：写过该数据事务中最大的时间戳，即最后写x的事务的时间戳。
  * C(x)：x的提交位。该位为真，当且仅当最近写x的事务已经提交。
    * C(x)的目的是避免出现事务读另一事务U所写数据然后U终止这样的情况。
* 事务的时间戳
  * TS(T)：即TimeStamp



对来自事务T的读写请求，调度器可以：

* 同意请求
* 撤销/终止T，并重启具有新时间戳的T(终止+重启，被称回滚)
* 推迟T（依据就是C(x)提交位），并在以后决定是终止T还是同意请求(如果请求是读，且此读可能是脏的)



另一种调度规则

* 假设调度器收到请求rT(X)

  * (1)如果TS(T)>=WT(x), 此读是事实上可实现的
    * 如C(x)为真，同意请求。如果TS(T)>RT(x), 置RT(x):=TS(T); 否则不改变RT(x). 
    * 如C(x)为假，推迟Ｔ直到C(x)为真或写x的事务终止。
  * (2)如果TS(T)<WT(x), 此读是事实上不可实现的
    * 回滚T(终止并重启T)；过晚的读

* 假设调度器收到请求wT(X)

  * (1) 先判断：TS(T)<RT(x), 此写是事实上不可实现的

    * T必须回滚。过晚的写

  * (2) 如果TS(T)>=RT(x)

    * TS(T)>=WT(x), 此写是事实上是可实现的
      * 为x写入新值；置WT(x):=TS(T)；置C(x):=false.

    * TS(T)<WT(x)，此写是事实上可实现的。但x已经有一个更晚的值
      * 如果C(x)为真，那么前一个x的写已提交；则忽略T的写；继续进行。(托马斯写规则)
      * 如果C(x)为假，则我们需推迟T，直到C(x)为真或写x的事务终止。

    



#### 有效性确认并发控制

* 批量性的冲突检测



基于时间戳的并发控制的思想

* 事务在启动时刻被赋予唯一的时间戳，以示其启动顺序。
* 为每一数据库元素保存读时间戳和写时间戳，以记录读或写该数据元素的最后的事务。
* 通过在事务读写数据时判断是否存在冲突(读写冲突、写读冲突、写写冲突)来强制事务以可串行化的方式执行。

基于有效性确认的并发控制的思想

* 事务在启动时刻被赋予唯一的时间戳，以示其启动顺序。
* 为每一活跃事务保存其读写数据的集合，RS(T)：事务T读数据的集合；WS(T)：事务T写数据的集合。
* 通过对多个事务的读写集合，判断是否有冲突(存在事实上不可实现的行为)，即有效性确认，来完成事务的提交与回滚，强制事务以可串行化的方式执行。



基于有效性确认的调度器

* 事务在启动时刻被赋予唯一的时间戳，以示其启动顺序。
* 每一事务读写数据的集合，RS(T)：事务T读数据的集合；WS(T)：事务T写数据的集合。
* 事务分三个阶段进行
  * 读阶段。事务从数据库中读取读集合中的所有元素。**事务还在其局部地址空间计算它将要写的所有值**；
  * 有效性确认阶段。调度器通过比较该事务与其它事务的读写集合来确认该事务的有效性。
  * 写阶段。事务往数据库中写入其写集合中元素的值。
* 每个成功**确认的事务是在其有效性确认的瞬间执行**的。
* 并发事务串行的顺序即事务有效性确认的顺序。

调度器维护三个集合

* START集合。已经开始但尚未完成有效性确认的事务集合。对此集合中的事务，调度器维护START(T)，即事务T开始的时间。
* VAL集合。已经确认有效性但尚未完成第3阶段写的事务。对此集合中的事务，调度器维护START(T)和VAL(T)，即T确认的时间。
* FIN集合。已经完成第3阶段的事务。对这样的事务T,    调度器记录START(T), VAL(T)和FIN(T)，即T完成的时间。



两种冲突（实际就是 读写/写读 和 写写）

* 对于所有已经过有效性确认, 且在T开始前没有完成的U, 
  * 即对于满足 FIN(U)>START(T)的U,
  * 检测：RS(T) $\bigcap$WS(U)是否为空。
  * 若为空，则确认。否则，不予确认。
* 对于所有已经过有效性确认，且在T有效性确认前没有完成的U, 
  * 即对于满足FIN(U)>VAL(T)的U, 
  * 检测：WS(T) $\bigcap$WS(U)是否为空。
  * 若为空，则确认。否则，不予确认。 



示例

![在这里插入图片描述](https://img-blog.csdnimg.cn/20201127140936410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzNDYwNw==,size_16,color_FFFFFF,t_70#pic_center)



* U的有效性确认
  * 无需检测，直接确认U。
* T的有效性确认
  * 因FIN(U)>START(T), 需检测RS(T) $\bigcap$WS(U) 
  * 因FIN(U)>VAL(T),需检测WS(T) $\bigcap$WS(U) 
  * 检测结果：均为空，则确认T。
* V的有效性确认
  * 因FIN(U)>START(V), 需检测RS(V) $\bigcap$WS(U) 
  * 因FIN(T)>START(V),需检测RS(V) $\bigcap$WS(T) 
  * 因FIN(T)>VAL(V),需检测WS(T) $\bigcap$WS(V) 
  * 检测结果：均为空，则确认V。
* W的有效性确认
  * 因FIN(T)>START(W), 需检测RS(W) $\bigcap$WS(T) 
  * 因FIN(V)>START(W),需检测RS(W) $\bigcap$WS(V) 
  * 因FIN(V)>VAL(W),需检测WS(V) $\bigcap$WS(W) 
  * 检测结果：不全为空,则W不能确认,W被回滚。

